using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Tile : MonoBehaviour{
    public Transform myTransform;
    public Vector3 position;
    public float rotation;
    private float long_diameter = 10f;
    private float edge_length = 17.323232f;
    public List<Tile> neighbors;
    public Tile baseVersion;
    public Tile backReference;
    public Tile alternateVersion;

    public Building _building; //The building on this tile
    public List<Tile> _neighborTiles; //List of all surrounding tiles. Generated by GameManager

    #region Enumerations
    public enum TileTypes {Empty = 0, Water = 1, Sand = 2, Grass = 3, Forest = 4, Stone = 5, Mountain = 6}; //Enumeration of all available tile types. Can be addressed from other scripts by calling Tile.Tiletypes
    #endregion
    public int TileType;

    public void Start(){
        if (TileType == (int)TileTypes.Mountain)
        {
            // Debug.Log(string.Format("Is a mountain tile {0}", position));
        }
    }

    public Vector3 position_absolute() {
        Vector3 abs_position;
        // Debug.Log((position.x, position.z));
        if (position.x % 2 == 0)
        {
            abs_position = new Vector3(position.x / 2 * edge_length, position.y, position.z * long_diameter);
        }
        else
        {
            abs_position = new Vector3(((position.x - 1) / 2 * edge_length) + 8.66f, position.y, (position.z * long_diameter) + 5);
        }
        return abs_position;
    }

    public override bool Equals(object obj)
    {
        return base.Equals(obj);
    }

    public override int GetHashCode()
    {
        return base.GetHashCode();
    }

    public override string ToString()
    {
        return base.ToString();
    }
    public string test()
    {
        return "Test";
    }

    public bool fitsRequirement(Transform[] required)
    {
        foreach (Transform trafo in required)
        {
            if (trafo.GetComponent<Tile>().TileType == TileType)
            {
                return true;
            }
        }
        return false;
    }

    public void placeBuilding(GameObject building, RessourceManager ressourceManager){
        if (_building == null) {
            GameObject newBuild = Instantiate(building, position_absolute(), Quaternion.Euler(0, this.rotation, 0));
            _building = newBuild.GetComponent<Building>();

            Debug.Log(string.Format("Upkeep of building is {0}", _building.upkeep));
            if (fitsRequirement(_building.build_requirement) && ressourceManager.canAfford(_building))
            {
                Transform tileObject = Instantiate(baseVersion.transform, transform.position, Quaternion.Euler(0, this.rotation, 0));
                Tile tile = tileObject.GetComponent<Tile>();
                gameObject.SetActive(!gameObject.activeSelf);
                tile.backReference = this;
                tile._building = _building;
                _building.tile = this;
                ressourceManager.buyBuilding(_building);
            } 
            else 
            { // Revert changes
                Destroy(_building.gameObject);
                _building = null;
            }
        }
        else {
            backReference.gameObject.SetActive(!backReference.gameObject.activeSelf);
            Destroy(this.gameObject);
            Destroy(backReference._building.gameObject);

        }
    }
}
